# -*- coding: utf-8 -*-

"""
paypalserversdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from paypalserversdk.api_helper import APIHelper
from paypalserversdk.configuration import Server
from paypalserversdk.http.api_response import ApiResponse
from paypalserversdk.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from paypalserversdk.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from paypalserversdk.models.transactions_details import TransactionDetails
from paypalserversdk.models.captured_payment import CapturedPayment
from paypalserversdk.models.refund import Refund
from paypalserversdk.exceptions.error_exception import ErrorException
from paypalserversdk.exceptions.api_exception import ApiException


class TransactionsController(BaseController):
    """A Controller to access Endpoints in the paypalserversdk API."""
    
    def __init__(self, config):
        super(TransactionsController, self).__init__(config)
    
    def transactions_get(self,
                         options=dict()):
        """Does a GET request to /v1/reporting/transactions/.
            Doc:https://developer.paypal.com/docs/api/transaction-search/v1/#search_get

        Lists transactions.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are:

                    transaction_type -- str -- Filters the transactions in the response
                        by a PayPal transaction event code. For transaction event codes see
                        https://developer.paypal.com/docs/transaction-search/transaction-event-codes/
                    transaction_status --str-- Filters the transactions in the response
                        by a PayPal transaction status code. (S - The transaction successfully completed without a
                        denial and after any pending statuses.)
                    start_date - str -- Filters the transactions in the response by a start date and time,
                        in https://datatracker.ietf.org/doc/html/rfc3339#section-5.6. Seconds are required.
                        Fractional seconds are optional.
                    end_date - str -- Filters the transactions in the response by a start date and time,
                        in https://datatracker.ietf.org/doc/html/rfc3339#section-5.6. Seconds are required.
                        Fractional seconds are optional.
                    fields --str-- Indicates which fields appear in the response. Value is a single field or
                        a comma-separated list of fields. The transaction_info value returns only
                        the transaction details in the response. To include all fields in the response,
                        specify fields=all.
                    page_size --int-- Indicates the maximum number of transactions to return per page. Default:  100
                    page --int-- The zero-relative start index of the entire list of items
                        that are returned in the response.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. A
                successful request returns the HTTP <code>200 OK</code> status
                code and a JSON response body that shows authorization details.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        
        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/v1/reporting/transactions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                            .key('start_date')
                            .value(options.get('start_date', None))
                            .should_encode(True))
            .query_param(Parameter()
                            .key('end_date')
                            .value(options.get('end_date', None))
                            .should_encode(True))
            .query_param(Parameter()
                            .key('transaction_type')
                            .value(options.get('transaction_type', None))
                            .should_encode(True))
            .query_param(Parameter()
                            .key('transaction_status')
                            .value(options.get('transaction_status', None))
                            .should_encode(True))
            .query_param(Parameter()
                            .key('fields')
                            .value(options.get('fields', None))
                            .should_encode(True))
            .query_param(Parameter()
                            .key('page_size')
                            .value(options.get('page_size', None))
                            .should_encode(True))
            .query_param(Parameter()
                            .key('page')
                            .value(options.get('page', None))
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('Oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TransactionDetails.from_dictionary)
            .is_api_response(True)
            .local_error('401',
                         'Authentication failed due to missing authorization header, or invalid authentication credentials.',
                         ErrorException)
            .local_error('404', 'The request failed because the resource does not exist.', ErrorException)
            .local_error('500', 'The request failed because an internal server error occurred.', ApiException)
            .local_error('default', 'The error response.', ErrorException)
        ).execute()
